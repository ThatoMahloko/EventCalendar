import React from 'react'
import { StyleSheet, Text, View, Button } from 'react-native';
import PushNotificationIOS from "@react-native-community/push-notification-ios";
import PushNotification from "react-native-push-notification";

import Store from './views/Store'
import { Component } from 'react';
import ScheduleForm from './views/ScheduleForm';

export class App extends Component {

  constructor() {
    super();
    // Must be outside of any component LifeCycle (such as `componentDidMount`).
    PushNotification.configure({
      // (optional) Called when Token is generated (iOS and Android)
      onRegister: function (token) {
        console.log("TOKEN:", token);
      },

      // (required) Called when a remote is received or opened, or local notification is opened
      onNotification: function (notification) {
        console.log("NOTIFICATION:", notification);

        // process the notification

        // (required) Called when a remote is received or opened, or local notification is opened
        // notification.finish(PushNotificationIOS.FetchResult.NoData);
      },

      // (optional) Called when Registered Action is pressed and invokeApp is false, if true onNotification will be called (Android)
      onAction: function (notification) {
        console.log("ACTION:", notification.action);
        console.log("NOTIFICATION:", notification);

        // process the action
      },

      // (optional) Called when the user fails to register for remote notifications. Typically occurs when APNS is having issues, or the device is a simulator. (iOS)
      onRegistrationError: function (err) {
        console.error(err.message, err);
      },

      // IOS ONLY (optional): default: all - Permissions to register.
      permissions: {
        alert: true,
        badge: true,
        sound: true,
      },

      // Should the initial notification be popped automatically
      // default: true
      popInitialNotification: true,

      /**
       * (optional) default: true
       * - Specified if permissions (ios) and token (android and ios) will requested or not,
       * - if not, you must call PushNotificationsHandler.requestPermissions() later
       * - if you are not using remote notification or do not have Firebase installed, use this:
       *     requestPermissions: Platform.OS === 'ios'
       */
      requestPermissions: true,
    });
  }

  testPush = () => {
    PushNotification.localNotificationSchedule({
      //... You can use all the options from localNotifications
      message: "My Notification Message", // (required)
      date: new Date(Date.now()+ 3 *1000), // in 60 secs {// a new date could uses Date(year, month, day, hours, minutes, seconds, miliseconds) }
      allowWhileIdle: false, // (optional) set notification to work while on doze, default: false

      /* Android Only Properties */
      repeatTime: 1, // (optional) Increment of configured repeatType. Check 'Repeating Notifications' section for more info.
      reapeatinterval: 1, //The repeat interval of this notification.
      repeatType:'day'
    });
  }

  render() {
    const val = new Store();

    console.log(this.val)
    return (
      <View>
        <View>
          <Button 
          title="CLICK ME"
          onPress={this.testPush}/>
           
        </View>
      </View>
    )
  }
}

const styles = StyleSheet.create({
  container: {
    justifyContent: 'center',
    alignItems: 'center',
    marginTop: 10
  }
  // ,
  // form: {
  //   shadowColor: "#000",
  //   width: 370,
  //   borderWidth: 4,
  //   borderColor: "#000",
  //   height: 600,
  //   margin: 'auto',
  //   justifyContent: 'center',
  //   alignItems: 'center',
  // }
  ,
  button: {
    justifyContent: 'center',
    margin: 'auto',
    height: 40,
    backgroundColor: "pink",
    textAlign: 'center',
    padding: 'auto'
  }
  ,
  btnText: {
    textAlign: 'center'
  }
})


export default App



